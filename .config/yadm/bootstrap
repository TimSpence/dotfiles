#!/bin/bash

truecolor_check() {
    echo "Checking for truecolor support"
    awk 'BEGIN{
    s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
    for (colnum = 0; colnum<77; colnum++) {
        r = 255-(colnum*255/76);
        g = (colnum*510/76);
        b = (colnum*255/76);
        if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
    printf "\n";
    }'
    echo "You will see a rainbow if your terminal supports TrueColor"
}

check_all_the_things() {
    # https://gist.github.com/XVilka/8346728#gistcomment-3191656
    echo -ne \\e\[1\;3\;4:3\;5\;53\;38\;2\;255\;127\;0\;58\;2\;0\;48\;255\;48\;2\;255\;0\;{0..255..8}mX \\e\[0m\\n
}

is_linux() {
  [[ $(uname -s) == 'Linux' ]];
}

is_osx() {
  [[ $(uname -s) == 'Darwin' ]];
}

usage() {
    cat <<-EOF
  Usage: $0 [OPTION]...
  Bootstraps dotfiles used by yadm.
  Use --minimal to apply the minimum (i.e., usability).

  This operation is intended to by idempotent.

  Required arguments:
    One of:
      --minimal          install packages, configure zsh,
                           set yadm git origin, install
                           fonts (OS X only)
      --all              install all the things.  Equivalent
                           to --minimal --git --keys

  Optional arguments:
    Any of:
      --git              configure git author info
      --keys             generate SSH key
      --help             print this message and exit
EOF
}

configure_vim_plugin_manager() {
    if command -v vim >/dev/null 2>&1; then
        echo "Bootstraping Vim"
        vim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
    fi
}

configure_git() {
    echo "Setting up Git"
    echo "Enter the name to use for git author:"
    read git_name
    echo "Enter the email to use for git author:"
    read git_email

    git config --global user.name "${git_name}"
    git config --global user.email "${git_email}"
}

configure_keys() {
    if [[ ! -f "${HOME}/.ssh/id_rsa" ]]; then
        echo "Setting up SSH client"
        ssh-keygen -t rsa -b 4096 -f "${HOME}/.ssh/id_rsa" -C "$(whoami)@$(hostname)"
    fi
    eval "$(ssh-agent -s)"
    ssh-add ${HOME}/.ssh/id_rsa
    if [[ ! -f "${HOME}/.ssh/config" ]]; then
        cat << EOF > "${HOME}/.ssh/config"
Host *
  AddKeysToAgent yes
  ServerAliveInterval 60
  IdentityFile ~/.ssh/id_rsa
EOF
    fi
}

install_packages() {
    # Install fzf from source to avoid package differences
    if [[ ! -d ${HOME}/.fzf ]]; then
        git clone --depth=1 https://github.com/junegunn/fzf.git ${HOME}/.fzf
        ${HOME}/.fzf/install --all
    fi

    if is_osx; then
        if ! command -v brew > /dev/null 2>&1 ; then
            echo "Installing Homebrew.  Beer memes commencing..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        fi
        echo "Installing default brew bundle"
        brew bundle --file=~/.config/yadm/brewfile
    elif is_linux; then
        if [[ -f ${HOME}/.config/aptfile ]]; then
            echo "Installing apt packages from aptfile"
            sudo apt update && sudo apt install -y $(cat ${HOME}/.config/aptfile | tr "\n" " ")
        fi

        # The fd binary is named fdfind on Linux.
        # Symlink if fdfind exists.
        if command -v fdfind >/dev/null 2>&1; then
            command -v fd >/dev/null 2>&1 || sudo ln -s $(which fdfind) /usr/bin/fd
        fi

        # Install fpp
        if ! command -v fpp>/dev/null 2>&1; then
            echo "Installing Facebook Path Picker"
            (
                set -e
                git clone "https://github.com/facebook/pathpicker.git" \
                    $HOME/git-clones/facebook/pathpicker
                cd $HOME/git-clones/facebook/pathpicker/debian
                ./package.sh
                find ../ -type f -name '*.deb' -print | xargs sudo dpkg --install
            )
        fi
    else
        echo "Don't know how to install packages for this operating system"
    fi
}

install_fonts() {
    if is_osx; then
        if [ ! -d $HOME/git-clones/fonts ]; then
            echo "Installing Powerline fonts"
            git clone https://github.com/powerline/fonts.git --depth=1 $HOME/git-clones/fonts
            (
                cd $HOME/git-clones/fonts
                sh -x ./install.sh
            )
        fi
    elif is_linux; then
        sudo apt install -y fonts-powerline
    else
        echo "Don't know how to install fonts for this operating system"
    fi
}

block_root() {
    if [[ $(whoami) == "root" ]]; then
        echo "LOL what are you doing?"
        exit 1
    fi
}

configure_tmux_plugin_manager () {
    local plugin_dir=$HOME/.tmux/plugins
    if [ ! -d $plugin_dir ]; then
        git clone https://github.com/tmux-plugins/tpm.git $plugin_dir/tpm
        $plugin_dir/tpm/bin/install_plugins
    fi
}

do_it () {
    I=$(( $I + 1 ))
    echo -e \\x1b[1mRunning step $I: $2 \\x1b[0m
    $1
    echo
}

configure_minimum() {
    do_it truecolor_check "Verify terminal supports TrueColor"
    do_it configure_vim_plugin_manager "Configure Vim plugin manager"
    do_it configure_tmux_plugin_manager "Configure tmux plugin manager"
    do_it install_packages "Install packages managed by Apt or Homebrew"
    do_it install_fonts "Install Powerline fonts for OS X or Ubuntu"
}

configure_all_the_things() {
    configure_minimum
    do_it configure_git "Configure git author info"
    do_it configure_keys "Configure SSH key pairs"
}

finish () {
    echo -e \\x1b[1mDone!\\x1b[0m
    exit 0
}

main() {
    if [[ "$@" =~ "--help" ]]; then
        usage; exit 0
    elif [[ "$@" =~ "--all" ]]; then
        configure_all_the_things
        finish
    elif [[ "$@" =~ "--minimal" ]]; then
        configure_minimum
        shift
    else
        configure_minimum
    fi

    for arg in "$@"
    do
        case $arg in
            --git)
                configure_git
                shift
                ;;
            --keys)
                configure_keys
                shift
                ;;
            *)
                usage; exit 1
                ;;
        esac
    done
    finish
}

block_root
I=0
main "$@"
